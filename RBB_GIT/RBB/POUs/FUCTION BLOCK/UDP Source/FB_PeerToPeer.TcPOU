<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_PeerToPeer" Id="{32ed0a26-81fc-495d-8720-ffa048e85ae5}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_PeerToPeer
VAR_IN_OUT
	fbTx	    : FB_FrameFifo;
	fbRx		: FB_FrameFiforx;
	fbLog		: FB_LogFifo;
	//bCreated		: BOOL;
END_VAR
VAR_INPUT
	sSrvNetId		: T_AmsNetID 	:= '';
	sLocalHost		: T_IPv4Addr 	:= '192.168.10.30';
	nLocalPort		: UDINT 		:= 53634;
	bEnable 		: BOOL			:= FALSE;
	tReconnect		: TIME			:= T#5S;
	bLog			: BOOL			:= FALSE;
	sPrefix			: STRING 		:= 'PeerToPeerX::';
	
	
END_VAR
VAR_OUTPUT
	bCreated		: BOOL;
END_VAR
VAR
	fbCreate		: FB_SocketUdpCreate;
	fbClose			: FB_SocketClose;
	fbReceiveFrom	: FB_SocketUdpReceiveFrom;
	fbSendTo		: FB_SocketUdpSendTo;
	
	stSendTo		: ST_FrameFifoEntrydata;
	stReceivedFrom	: ST_FrameFifoEntrydatarx;
	
	fbCreateTimer	: TON := ( PT := T#0S );	
	eStep			: E_ClientServerSteps;
	
	reseteventerror : BOOL; 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eStep OF
	eUDP_STATE_IDLE:
		IF bEnable XOR bCreated THEN
			IF bEnable THEN
				fbTx.Clear( stput := stSendTo, bLog := bLog );
				fbRx.Clear( stput := stReceivedFrom, bLog := bLog );
				fbLog.Clear( sPrefix := sPrefix, bLog := bLog );

				fbCreateTimer( IN := TRUE );
				IF fbCreateTimer.Q THEN
					fbCreateTimer( IN := FALSE, PT := tReconnect ); 
					eStep := eUDP_STATE_CREATE_START;
				END_IF
			ELSE
				eStep := eUDP_STATE_CLOSE_START;
			END_IF
		ELSIF bCreated THEN
		fbTx.RemoveHead( stGet => stSendTo );
		IF fbTx.bok THEN
		   eStep := eUDP_STATE_SEND_START;
		ELSE 
		   eStep := eUDP_STATE_RECEIVE_START;
		END_IF
	ELSE
		fbCreateTimer( IN := FALSE, PT := T#0S );
		END_IF

	eUDP_STATE_CREATE_START:
		fbCreate( bExecute := FALSE  );
		fbCreate( sSrvNetId := sSrvNetId, sLocalHost:= sLocalHost, nLocalPort:= nLocalPort, bExecute:= TRUE );
		eStep := eUDP_STATE_CREATE_WAIT;

	eUDP_STATE_CREATE_WAIT:
		fbCreate( bExecute := FALSE );
		IF NOT fbCreate.bBusy THEN
			IF NOT fbCreate.bError THEN
				bCreated := TRUE;
				fbLog.Message( sMessage := 'Connectionless (UDP) socket created!', hSocket := fbCreate.hSocket );
				eStep := eUDP_STATE_IDLE;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketUdpCreate()', nErrID := fbCreate.nErrID );
				eStep := eUDP_STATE_ERROR;
			END_IF
		END_IF

	eUDP_STATE_SEND_START:
		fbSendTo( bExecute := FALSE );
		fbSendTo( sSrvNetId := sSrvNetId, sRemoteHost := stSendTo.stRemoteAddr.sAddr,
					nRemotePort := stSendTo.stRemoteAddr.nPort,
					pSrc:= ADR( stSendTo.txdata ),
					cbLen:= SIZEOF( stSendTo.txdata), 
					hSocket:= fbCreate.hSocket, bExecute:= TRUE );
					
     eStep := eUDP_STATE_SEND_WAIT;
	   	         
	eUDP_STATE_SEND_WAIT:
		fbSendTo( bExecute := FALSE );
		IF NOT fbSendTo.bBusy THEN
			IF NOT fbSendTo.bError THEN
				eStep := eUDP_STATE_RECEIVE_START;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketUdpSendTo()', nErrID := fbSendTo.nErrID );
				eStep := eUDP_STATE_ERROR;
			END_IF
		END_IF

	eUDP_STATE_RECEIVE_START:
		MEMSET( ADR( stReceivedFrom ), 0, SIZEOF( stReceivedFrom ) );
		fbReceiveFrom( bExecute := FALSE );
		fbReceiveFrom( sSrvNetId := sSrvNetId, 
						pDest:= ADR( stReceivedFrom.rxdata ),
						cbLen:= SIZEOF( stReceivedFrom.rxdata ) - 1, (* Without string delimiter *)
						hSocket:= fbCreate.hSocket, bExecute:= TRUE );
		eStep := eUDP_STATE_RECEIVE_WAIT;

	eUDP_STATE_RECEIVE_WAIT:
		fbReceiveFrom( bExecute := FALSE );
		IF NOT fbReceiveFrom.bBusy THEN
			IF NOT fbReceiveFrom.bError THEN
				IF fbReceiveFrom.nRecBytes > 0 THEN
					
					stReceivedFrom.stRemoteAddr.sAddr := fbReceiveFrom.sRemoteHost;
					stReceivedFrom.stRemoteAddr.nPort := fbReceiveFrom.nRemotePort;
					
					fbRx.AddTail( stPut := stReceivedFrom );
					
					IF NOT fbRx.bOk THEN
						fbLog.Error( sMessage :='FB_FrameFifo(receiver)', nErrID := PLCPRJ_ERROR_RECFIFO_OVERFLOW );
					END_IF
				END_IF
				eStep := eUDP_STATE_IDLE;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketUdpReceiveFrom()', nErrID := fbReceiveFrom.nErrID );
				IF fbReceiveFrom.nErrID = 16#80072746 THEN
					eStep := eUDP_STATE_IDLE;
				ELSE
					eStep := eUDP_STATE_ERROR;
				END_IF
			END_IF
		END_IF

	eUDP_STATE_CLOSE_START:
		fbLog.Message( sMessage := 'Closing connectionless (UDP) socket!', hSocket := fbCreate.hSocket );
		fbClose( bExecute := FALSE );
		fbClose( sSrvNetId := sSrvNetId, hSocket := fbCreate.hSocket, bExecute := TRUE );
		eStep := eUDP_STATE_CLOSE_WAIT;

	eUDP_STATE_CLOSE_WAIT:
		fbClose( bExecute := FALSE );
		IF NOT fbClose.bBusy THEN
			bCreated := FALSE;
			IF NOT fbClose.bError THEN
				eStep := eUDP_STATE_IDLE;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketClose()', nErrID := fbClose.nErrID );
				eStep := eUDP_STATE_ERROR;
			END_IF
		END_IF

	eUDP_STATE_ERROR: 
		IF bCreated THEN
			eStep := eUDP_STATE_CLOSE_START;
		ELSE
			eStep := eUDP_STATE_IDLE;
		END_IF
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="FB_PeerToPeer">
      <LineId Id="3" Count="3" />
      <LineId Id="201" Count="0" />
      <LineId Id="539" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="11" Count="9" />
      <LineId Id="366" Count="0" />
      <LineId Id="22" Count="28" />
      <LineId Id="375" Count="0" />
      <LineId Id="52" Count="3" />
      <LineId Id="712" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="58" Count="29" />
      <LineId Id="540" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="89" Count="38" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>